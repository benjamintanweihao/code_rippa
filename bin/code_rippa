#! /usr/bin/env ruby
begin
  require 'optparse'
  require 'code_rippa'
rescue LoadError
  $:.unshift File.join(File.dirname(__FILE__), '..', 'lib', )
  require 'code_rippa'
end

options = {}
option_parser = OptionParser.new do |opts|
  opts.banner =<<END

  Usage: code_rippa [options] input_file_or_directory

     Parses input_file or directory and outputs a file named out.tex. 
     Unless specified, 'Made of Code' is used as the default theme.
             
     To see all themes, type:
        code_rippa -l     
      
  Examples:
    
    1. code_rippa path_to_file.rb             (uses default theme)
    
    2. code_rippa -t rubyblue path_to_file.rb (with theme specified)
    
    3. code_rippa -t rubyblue path_to_dir     

    Then run `pdflatex -interaction=batchmode out.tex` to generate the PDF output.
        
  Options:
END
    
  opts.on('-t', '--theme THEME', 'Selected theme') do |theme|
    if Uv.themes.include? theme
      options[:theme] = theme  
    else  
      raise ArgumentError, "#{theme} theme not found. Use -l to see the list of available themes."
    end
  end
  
  opts.on('-n', '--list-syntax', 'List all available syntax') do
    puts CodeRippa.supported_syntax.join("\n")
    exit 0
  end
  
  opts.on('-l', '--list-themes', 'List all available themes') do
    puts Uv.themes.join("\n")
    exit 0
  end
  
  opts.on('-v', '--version', 'Display version number') do
    puts CodeRippa::VERSION
    exit 0
  end
    
  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit 0
  end

  opts.on('-c', '--compile-pdf', 'Compile output into pdf') do
    options[:compile] = true
  end
end

begin
  option_parser.parse!  
  # Set default theme. TODO: Allow user to change this
  options[:theme] ||= "made_of_code"
  options[:compile] ||= false

  if ARGV.size < 1
    raise ArgumentError, "Missing arguments. Aborting.\n"
  else
    output = CodeRippa.handle_parsing(ARGV, options[:theme])
    CodeRippa.write_file(output, options[:theme], options[:compile])
  end
  exit 0
rescue ArgumentError => e
  puts e
  exit 1
end
